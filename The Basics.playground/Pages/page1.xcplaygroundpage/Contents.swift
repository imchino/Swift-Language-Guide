//: [Previous](@previous)
/*:
# The Basics
__`基礎`__ \
 Swiftは、iOS、macOS、watchOS、およびtvOSアプリケーション開発用の新しいプログラミング言語です。
 それにもかかわらず、Swiftの多くの部分は、CおよびObjective-Cで開発したあなたの経験から精通しているでしょう。


 Swiftは、整数用のInt、浮動小数点値用のDoubleとFloat、ブール値用のBool、テキストデータ用のStringなど、すべての基本的なCおよびObjective-Cタイプの独自バージョンを提供します。
 Swiftは、コレクション型で説明されているように、3つの主要なコレクション型、Array、Set、およびDictionaryの強力なバージョンも提供します。

 Cのように、Swiftは変数を使って値を識別名で格納し参照します。
 Swiftはまた、値を変更できない変数を多用しています。
 これらは定数として知られており、Cの定数よりもはるかに強力です。
 変更する必要のない値を扱うときに意図的にコードをより安全かつ明確にするために、Swift全体で定数が使用されます。

 Swiftは、よく知られている型に加えて、タプルなど、Objective-Cにはない高度な型を導入しています。
 タプルを使用すると、値のグループ化を作成して受け渡すことができます。
 タプルを使用して、関数から複数の値を単一の複合値として返すことができます。

 Swiftでは、値の欠如を処理するオプションの型も導入されています。
 オプションには、「値があり、xに等しい」または「値がまったくない」のいずれかがあります。
 オプションを使用することは、Objective-Cでポインタを指定してnilを使用することと似ていますが、クラスだけでなく、あらゆるタイプに対して機能します。
 Objective-Cでは、オプションの方が安全で表現力豊かなポインタよりも表現力が高いだけでなく、Swiftの最も強力な機能の中心に位置しています。

 Swiftは型保証された言語です。
 つまり、この言語を使用すると、コードで使用できる値の種類を明確に理解できます。
 コードの一部に文字列が必要な場合は、型安全を使用すると、誤ってIntを渡すことができなくなります。
 同様に、型安全は、オプションの文字列を、オプションではない文字列を必要とするコードに誤って渡すのを防ぎます。
 型安全は、開発プロセスのできるだけ早い段階でエラーを見つけて修正するのに役立ちます。
*/




//: [Next](@next)
